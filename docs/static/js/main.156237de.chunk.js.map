{"version":3,"sources":["components/AddCategory.js","components/helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GitExpertApp","categories","ReactDOM","render","GifExpertApp","document","getElementById"],"mappings":"mMAMaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAwB5C,OACI,mCACI,sBAAMC,SAhBK,SAACC,GAChBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OACnCN,EAAc,MAWd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAzBS,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,e,+BCVlBG,EAAO,uCAAE,WAAOC,GAAP,uBAAAC,EAAA,6DAEZC,EAFY,iDAEqCC,UAAUH,GAF/C,+DAGCI,MAAMF,GAHP,cAGZG,EAHY,gBAIGA,EAAKC,OAJR,uBAIXC,EAJW,EAIXA,KAEDC,EAAKD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EAErB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXxB,kBAgBVM,GAhBU,4CAAF,sDCAPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAGlC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IAChB,4BAAIA,QCHPO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECCb,SAACA,GAAY,IAAD,EACRd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAHsB,mBAC3BC,EAD2B,KACpBC,EADoB,KA0BlC,OArBAC,qBAAU,WACNxB,EAASC,GACJwB,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLf,KAAKkB,EACLL,SAAQ,MAEb,UAGb,CAAEpB,IAUGqB,EDNuBM,CAAc3B,GAAhCa,EArBuB,EAqB5BN,KAAaa,EArBe,EAqBfA,QAEpB,OACI,qCACI,6BAAKpB,IAEHoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACb,qBAAKA,UAAU,aAAf,SAGQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEoBtBiB,EAlDM,WAAI,MASe1C,mBAAS,CAAC,gBATzB,mBASd2C,EATc,KASF5C,EATE,KAoBrB,OACI,qCACI,8CAGA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBAGA,6BAKQ4C,EAAWpB,KAAI,SAAAT,GAAQ,OAElB,aADD,CACE,EAAD,CAEGA,SAAUA,GADLA,Y,MCtCjC8B,IAASC,OACL,cAACC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.156237de.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {       //se recibe set categories q es enviado del componente padre\r\n\r\n    const [inputValue, setinputValue] = useState('');//vacio es undefine y '' string vacio\r\n\r\n    //extraer el valor ingresado e imprimir\r\n    const handleInputChange =(e)=>{\r\n        setinputValue(e.target.value); // se llama a la funcion usestate que va a tener los nuevos valores\r\n    }\r\n\r\n    //funcion para enter\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault();             //evita que el navegador refresque la p치gina\r\n\r\n        if(inputValue.trim().length>2){\r\n            setCategories(cats=>[inputValue,...cats]); //... extrae las categorias anteriores \r\n            setinputValue(''); //reicia el input y lo deja en blanco\r\n\r\n\r\n\r\n        }\r\n        //console.log(\"Submit enviado\"); \r\n\r\n\r\n    };\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <input \r\n                    type=\"text\" \r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </form>\r\n            \r\n            \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes ={\r\n    setCategories:PropTypes.func.isRequired //func de funcion\r\n}\r\n","\r\n//funcion que pide imagenes para eso le pasamos el valor categoria como argumentro\r\nexport const getGifs= async( category )=>{   //si es asincrono se pone el await\r\n    //almacenamos en una variable el url de la api\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=4Q3OCEsJWXiGYoLYh0pnQU6Yw5ZQplzP`;\r\n    const resp = await fetch(url);  //fetch espera o trae valores de la api await espera una promesa\r\n    const {data} = await resp.json(); // esta es la respuesta que viene en forma de json\r\n    //barrer con todos los datos de la dat y va a crear una nueva lista\r\n    const gifs=data.map(img=>{\r\n        //retorna un nuevo objeto con la info q m,e interesa\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    //console.log(gifs);\r\n    //pasamos el nuevo arreglo al nuevoestado\r\n    return (gifs);  //devuelve una promesa (colecci9on de datos)\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    //console.log({id,title,url});\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n                <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","// import React, { useState,useEffect } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n//import { getGifs } from './helpers/getGifs';\r\n\r\nexport const GifGrid = ({category}) => {      //el argumento que recibimos se pone entre llaves\r\n\r\n    //custom hooks extraer la logica de algun componente de manera m치s facil \r\n    //un nuevo estado\r\n    /*\r\n    const [images, setimages] = useState([]);\r\n\r\n\r\n    //si ponemos [] un arreglo vacio solo se ejecuta una vez\r\n    //use efects para controlar la peticion si la categoria cambia unicamente si la categorpua cambia\r\n    useEffect(()=>{\r\n        //llamamos al getGifs y atrapamos una prtomesa\r\n        getGifs(category)\r\n            .then(imgs=>setimages(imgs));   //then imgs es una variable  y esa variable llama a una funcio a la cual su argumento es el m,ismo imgs \r\n    },[category]);  //se le pone category en las llaves para que si la categoria cambia tambien cambiara\r\n    */\r\n   \r\n    //getGifs();\r\n\r\n    /*custOM HOOK */\r\n\r\n    const {data:images, loading}= useFetchGifs( category);    //almacenamos la funcion en la llaves {} eso se llama desestructurar\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {/* \" ? \" = si loading es true  \" : \" = caso contrario ---- el && si cumple hace si no no hace nada*/}\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n            <div className=\"card-grid \">\r\n                \r\n                {\r\n                    images.map(img=>(\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }           \r\n    \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","//hoks no son mas que funciones\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../components/helpers/getGifs\";\r\n//cuando se usa oir primera vez useFetchgifs se manda el estado por defecto \r\n\r\nexport const useFetchGifs=(category)=>{\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n    useEffect(()=>{                 //para evaluar un cambio, los efectos no pueden ser async      \r\n        getGifs( category)              //traigo las imagenes (es una prom,esa)\r\n            .then(imgs=>{\r\n                setTimeout(() => {\r\n                    setstate({\r\n                        data:imgs,\r\n                        loading:false\r\n                    })\r\n                }, 500);\r\n               \r\n            })  ;         \r\n    },[ category])                  // arreglo vacio para q solo se ejecuta una vez, evalua q cambia la categoria\r\n\r\n\r\n    //funcion que recibe un callback q despues de un tiempo hgace alguna cosa\r\n    /*setTimeout(() => {\r\n        setstate({\r\n            data:[1,2,3,4,5,6,7],\r\n            loading:false\r\n        })\r\n    }, 3000);*/\r\n    return state;\r\n}\r\n\r\n","import React,{useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n//usar el snipet rafc\r\n\r\n\r\n\r\nconst GitExpertApp = ()=>{\r\n\r\n    /*\r\n    retorna el html\r\n    \r\n    hook de useState tiene dos valores el primer es el valor y el segundo es un opcional\r\n\r\n    */\r\n\r\n    const [categories, setCategories] = useState(['Evil Wizard']);\r\n    //agregar un valor a la lista\r\n    /*\r\n    const handleAdd =()=>{\r\n        //categories.push('Hunter');          //push a침ande un valor al final de un array\r\n        setCategories([...categories,'Hunter']); //... extrae las categorias anteriores \r\n    }\r\n    */\r\n\r\n\r\n\r\n    return(\r\n        <>\r\n            <h2>GifExpertAdd</h2>\r\n\r\n            {/* m칩dule the recive the value of the input */}\r\n            <AddCategory setCategories={setCategories} />\r\n\r\n            <hr/>\r\n\r\n            {/* <button onClick={handleAdd}>Agregar</button>  // boton comentado poer q lo vamos a hacer de otra manera*/}\r\n            <ol>\r\n                {/* imprimir todo lol vector */}\r\n                {\r\n                    //map sirve para transformar cada elemento dentro del arreglo a algo que puede sar interpretadp por js\r\n                    //map recibe 2 valores primero categoria, y luego el indice\r\n                    categories.map(category=>(\r\n                        // return <li key={category}>{category}</li>\r\n                         <GifGrid \r\n                            key={category} \r\n                            category={category}/>  //llamamos al nuevo modulo y enviamos el argumento que se esta utilizando con el map\r\n\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default GitExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp  />,\n  document.getElementById('root')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n//GitExpert"],"sourceRoot":""}